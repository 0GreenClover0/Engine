#version 430 core

layout (quads, fractional_odd_spacing, cw) in;

struct Material
{
    sampler2D texture_height1;
};

uniform Material material;

uniform mat4 PVM;

in vec2 TextureCoordinatesTessellation[];

out float Height;

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 t00 = TextureCoordinatesTessellation[0];
    vec2 t01 = TextureCoordinatesTessellation[1];
    vec2 t10 = TextureCoordinatesTessellation[2];
    vec2 t11 = TextureCoordinatesTessellation[3];

    // Bilineary interpolate the texture coordinates across the patch
    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 textureCoordinates = (t1 - t0) * v + t0;

    // Lookup texel at the interpolated texture coordinates of the patch. Scale and shift as desired
    Height = texture(material.texture_height1, textureCoordinates).y * 32.0 - 16.0;

    // Retrieve control point positions
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    // Compute patch surface normal
    vec4 u_vec = p01 - p00;
    vec4 v_vec = p10 - p00;
    vec4 normal = normalize(vec4(cross(v_vec.xyz, u_vec.xyz), 0.0));

    // Bilineary interpolate the vertex position across the patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 position = (p1 - p0) * v + p0;

    // Displace the vertex position along the normal
    position += normal * Height;

    // Transform the vertex position and output it in clip space
    gl_Position = PVM * position;
}